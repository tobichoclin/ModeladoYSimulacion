# -*- coding: utf-8 -*-
import sys, numpy as np
try:
    sys.stdout.reconfigure(encoding='utf-8')
except Exception:
    pass

from scipy.stats import norm   # usamos scipy para obtener z seg√∫n nivel de confianza

def mc_integrate(f, a, b, N, seed=None, conf=95):
    """
    Integral de f(x) en [a,b] con Monte Carlo.
    Par√°metros:
        f    : funci√≥n a integrar
        a,b  : l√≠mites de integraci√≥n (ej: 0, 1)
        N    : n√∫mero de muestras (ej: 100_000)
        seed : opcional, semilla aleatoria (ej: 42)
        conf : nivel de confianza en % (default 95)
    """
    rng = np.random.default_rng(seed)
    x = rng.uniform(a, b, size=N)
    fx = np.asarray(f(x), dtype=float)
    mask = np.isfinite(fx)
    if not np.all(mask):
        fx = fx[mask]
        if fx.size == 0:
            raise ValueError("Todas las evaluaciones de f(x) fueron no finitas.")

    mean_f = np.mean(fx)
    sigma = np.std(fx, ddof=1)
    volume = (b - a)
    estimate = volume * mean_f
    se = volume * sigma / np.sqrt(fx.size)

    # valor cr√≠tico z seg√∫n el nivel de confianza
    z = norm.ppf(0.5 + conf/200.0)
    ci = (estimate - z*se, estimate + z*se)

    return {"I": estimate, "SE": se, "CI": ci, "N": fx.size}

# ================================
# üëá EJEMPLO DE USO: CAMBI√Å ESTOS VALORES üëá
# ================================
if __name__ == "__main__":
    import math

    # 1) DEFIN√ç TU FUNCI√ìN AC√Å üëá
    def f(x):
        return np.exp(-x**2)   # <--- CAMBI√Å ESTA FUNCI√ìN

    # 2) DEFIN√ç LOS PAR√ÅMETROS DE ENTRADA üëá
    a = 0        # <--- CAMBI√Å: l√≠mite inferior del intervalo
    b = 1        # <--- CAMBI√Å: l√≠mite superior del intervalo
    N = 100000   # <--- CAMBI√Å: n√∫mero de muestras
    seed = 42    # <--- CAMBI√Å (opcional): semilla para reproducibilidad
    conf = 95    # <--- CAMBI√Å (opcional): nivel de confianza (%)

    # 3) EJECUTAR MONTE CARLO üëá
    res = mc_integrate(f, a=a, b=b, N=N, seed=seed, conf=conf)

    # 4) MOSTRAR RESULTADOS üëá
    print(f"Integral ‚à´_{a}^{b} f(x) dx")
    print(f"  I_MC ‚âà {res['I']:.8f}")
    print(f"  SE   ‚âà {res['SE']:.8f}")
    print(f"  IC   ‚âà [{res['CI'][0]:.8f}, {res['CI'][1]:.8f}]  (nivel {conf}%)")
    print(f"  N efectivo = {res['N']}")
